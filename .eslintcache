[{"E:\\kaikeba\\study\\train-ticket\\src\\App.jsx":"1","E:\\kaikeba\\study\\train-ticket\\src\\Add.jsx":"2","E:\\kaikeba\\study\\train-ticket\\src\\reportWebVitals.js":"3","E:\\kaikeba\\study\\train-ticket\\src\\index.js":"4","E:\\kaikeba\\study\\train-ticket\\src\\Count.jsx":"5","E:\\kaikeba\\study\\train-ticket\\src\\CountHooks.jsx":"6","E:\\kaikeba\\study\\train-ticket\\src\\TodoList.jsx":"7","E:\\kaikeba\\React\\React\\src\\reportWebVitals.js":"8"},{"size":1488,"mtime":1610334185371,"results":"9","hashOfConfig":"10"},{"size":2476,"mtime":1609928461211,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1609756823286,"results":"12","hashOfConfig":"10"},{"size":504,"mtime":1609841456289,"results":"13","hashOfConfig":"10"},{"size":1287,"mtime":1610002430069,"results":"14","hashOfConfig":"10"},{"size":3083,"mtime":1610097887103,"results":"15","hashOfConfig":"10"},{"size":3128,"mtime":1610349332505,"results":"16","hashOfConfig":"10"},{"size":362,"mtime":1609756823286,"results":"17","hashOfConfig":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"10bgoqo",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"29qtnu","E:\\kaikeba\\study\\train-ticket\\src\\App.jsx",["38","39","40","41"],"E:\\kaikeba\\study\\train-ticket\\src\\Add.jsx",["42"],"import React, { Component, useState, useEffect } from 'react';\r\n\r\n// 类组件\r\n// export default class Add extends Component {\r\n//     state = {\r\n//         count: 0,\r\n//     };\r\n//     render() {\r\n//         const { count } = this.state;\r\n//         return (\r\n//             <button type=\"button\" onClick={() => { this.setState({ count: count + 1 }) }}>\r\n//                 Click({count})\r\n//             </button>\r\n//         )\r\n//     }\r\n// }\r\n\r\n// HOOKS组件\r\nfunction Add(props) {\r\n    // const [count, setCount] = useState(0);\r\n    // useState中传入的方法只在组件第一次渲染时执行，即只执行一次\r\n    const [count, setCount] = useState(() => {\r\n        return props.defaultCount || 0;\r\n    });\r\n\r\n    const [size, setSize] = useState({\r\n        width: document.documentElement.clientWidth,\r\n        height: document.documentElement.clientHeight,\r\n    })\r\n\r\n    const onResize = () => {\r\n        setSize({\r\n            width: document.documentElement.clientWidth,\r\n            height: document.documentElement.clientHeight,\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('resize', onResize, false)\r\n        return () => {\r\n            window.removeEventListener('resize', onResize, false)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        document.title = count;\r\n    })\r\n    // 只有数组中的count变化才会执行打印，resize不会出发打印\r\n    useEffect(() => {\r\n        console.log('count', count);\r\n    }, [count])\r\n\r\n    const onClick = () => {\r\n        console.log('click');\r\n    }\r\n\r\n    // 一旦元素销毁重建，绑定的事件失效\r\n    // useEffect(() => {\r\n    //     document.querySelector('#size').addEventListener('click', onClick, false)\r\n    // },[])\r\n\r\n    // 解决办法： return一个清理函数\r\n    useEffect(() => {\r\n        document.querySelector('#size').addEventListener('click', onClick, false)\r\n        return () => {\r\n            document.querySelector('#size').removeEventListener('click', onClick, false)\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <button type=\"button\" onClick={() => { setCount(count + 1) }}>\r\n                Click({count})\r\n        </button>\r\n            {//p标签偶数销毁，奇数重建\r\n                count % 2 ? (<span id=\"size\">size:{size.width} x {size.height}</span>) :\r\n                    <p id=\"size\">size:{size.width} x {size.height}</p>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Add",["43","44"],"E:\\kaikeba\\study\\train-ticket\\src\\reportWebVitals.js",[],"E:\\kaikeba\\study\\train-ticket\\src\\index.js",[],"E:\\kaikeba\\study\\train-ticket\\src\\Count.jsx",[],"E:\\kaikeba\\study\\train-ticket\\src\\CountHooks.jsx",["45"],"/* \r\n* 学习memo useMemo useCallback \r\n* 学习useRef ==> 如何使用？ ==> useRef要用在类组件、 countRef.current拿到组件 \r\n* 自定义HOOKS ==> 写了哪些自定义hooks函数 ==> useNum useSize\r\n*\r\n*/\r\n\r\nimport React, { useState, useMemo, memo, useCallback, useRef, PureComponent, useEffect } from 'react'\r\n\r\nconst Count = (props) => {\r\n    const size = useSize();\r\n    return(\r\n        <h1>{props.count}; size:{size.width}x{size.height}</h1>\r\n    )\r\n}\r\n\r\n// 使用memo的组件\r\nconst CountMemo = memo(function CountMemo(props) {\r\n    console.log('Counter render')\r\n    return (\r\n        <h1>CountMemo: {props.count}</h1>\r\n    )\r\n})\r\n\r\n//使用useRef的组件 useRef要用在类组件\r\nclass CountRef extends PureComponent {\r\n    speak() {\r\n        console.log(`now count is ${this.props.count}`)\r\n    }\r\n    render() {\r\n        return (\r\n            <h1 onClick={this.props.onClick}>CountRef: {this.props.count}</h1>\r\n        )\r\n    }\r\n}\r\n\r\n// 写一个自定义HOOKS函数 useNum (和函数组件很像,只有输入输出不同)\r\nfunction useNum(defaultCount) {\r\n    const [num, setNum] = useState(defaultCount);\r\n    // 自定义hook的返回值模仿useState返回一个数组[]\r\n    return [num, setNum]\r\n}\r\n\r\n// 写一个自定义HOOKS函数 useSize \r\nfunction useSize() {\r\n    const [size, setSize] = useState({\r\n        width: document.documentElement.clientWidth,\r\n        height: document.documentElement.clientHeight\r\n    })\r\n\r\n    const onResize = useCallback(() => {\r\n        setSize({\r\n            width: document.documentElement.clientWidth,\r\n            height: document.documentElement.clientHeight\r\n        })\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        window.document.addEventListener('resize', onResize, false)\r\n        return () => {\r\n            window.removeEventListener('resize', onResize, false)\r\n        }\r\n    }, [])\r\n    return size;\r\n}\r\n\r\nfunction Counter() {\r\n    const [count, setCount] = useState(0);\r\n\r\n    // 使用自定义的hook函数 useNum\r\n    const [num, setNum] = useNum(22)\r\n\r\n    // 使用自定义的hook函数 useSize\r\n    const size = useSize();\r\n\r\n    // useMemo\r\n    const double = useMemo(() => {\r\n        return count * 2\r\n    }, [count])\r\n    // const clickEvent = useMemo(() => {\r\n    //     console.log('click了H1')\r\n    // },[])\r\n\r\n    // useCallback\r\n    const clickEvent = useCallback(() => {\r\n        console.log('click了H1')\r\n    }, [])\r\n\r\n    // useRef\r\n    const countRef = useRef();\r\n    const clickCountRef = useCallback(() => {\r\n        // console.log(countRef.current)\r\n        countRef.current.speak()\r\n    }, [countRef])\r\n\r\n    return (\r\n        <div>\r\n            <button type=\"button\" onClick={() => { setCount(count + 1) }} onMouseMove={() => { setNum(num + 1) }}>Click:count是{count}   num是{num}   double:{double} size:{size.width}x{size.height}</button>\r\n            <Count count={count}/>\r\n            <CountMemo count={double} onClick={clickEvent} />\r\n            <CountRef ref={countRef} onClick={clickCountRef} count={double} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Counter;","E:\\kaikeba\\study\\train-ticket\\src\\TodoList.jsx",[],"E:\\kaikeba\\React\\React\\src\\reportWebVitals.js",[],{"ruleId":"46","severity":1,"message":"47","line":1,"column":34,"nodeType":"48","messageId":"49","endLine":1,"endColumn":42},{"ruleId":"46","severity":1,"message":"50","line":4,"column":8,"nodeType":"48","messageId":"49","endLine":4,"endColumn":13},{"ruleId":"46","severity":1,"message":"51","line":5,"column":8,"nodeType":"48","messageId":"49","endLine":5,"endColumn":18},{"ruleId":"46","severity":1,"message":"52","line":7,"column":7,"nodeType":"48","messageId":"49","endLine":7,"endColumn":10},{"ruleId":"46","severity":1,"message":"53","line":1,"column":17,"nodeType":"48","messageId":"49","endLine":1,"endColumn":26},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":63,"column":8,"nodeType":"60","endLine":63,"endColumn":10,"suggestions":"61"},"no-unused-vars","'Suspense' is defined but never used.","Identifier","unusedVar","'Count' is defined but never used.","'CountHooks' is defined but never used.","'Add' is assigned a value but never used.","'Component' is defined but never used.","no-native-reassign",["62"],"no-negated-in-lhs",["63"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onResize'. Either include it or remove the dependency array.","ArrayExpression",["64"],"no-global-assign","no-unsafe-negation",{"desc":"65","fix":"66"},"Update the dependencies array to be: [onResize]",{"range":"67","text":"68"},[1673,1675],"[onResize]"]